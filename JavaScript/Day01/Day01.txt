Javascript는 인터프리터 언어 
  안녕하세요 -> 컴파일 - 기계어 -> 010001010

  컴파일 언어와는 반대로 변환 과정 없이 소스 코드를 바로 실행하는 프로그램 언어 
  v8 엔진에 의하여 필요에 따라 컴파일 과정을 거칠 수 있도록 하여 자바스크립트의 성능을 향상 

  JSON 
  ----데이터 양식 -> 키와 값으로 이루어져 있음 객체?
  자바스크립트 객체 표현식의 줄임말 

-----------------------------------------------------------------------------------------

js 적용법 

-내부-

  <html>
    <script>
      ...js
    </script>
  </html>

-외부-
  .js

  <html>
    ....
    <script src='경로'><script>
  <html>

-----------------------------------------------------------------------------------------
입출력 

입력
console.log()
console.error()
window.(생략가능)alert()
window.(생략가능)confirm()

출력
window.(생략가능)prompt()

window -> browser
browser가 없으면 실행이 되지 않음

*개발중 -> 에러가 생김 -> 어디서 에러가 생겼는지 알 수 있을까?

1-------> 10까지 개발 

5-> console.log(5) -> 잘 나오면 -> 6~10 중 에러가 있다.

-> 개발 중 디버깅을 위해서 로그를 확인할 필요가 있고 이 때 console.log()를 활용하여
에러가 난 범위를 좁혀가며 디버깅 할 수 있다 

단, 디버깅이 끝난 후에는 삭제 해주어야 한다. 

-----------------------------------------------------------------------------------------

.js를 브라우저 환경이 아닌 다른 환경에서 직접 실행할 수 있는 nodejs 환경에서는 window가 실행되지 않습니다.

Node.js 
  크롬의 v8엔진을 브라우저 바깥으로 꺼내어 js를 브라우저 외부에서도 실행할 수 있도록 하는 런타임(환경, 실행)
  대표적으로 react-js와 같은 js 기반 프레임워크(도구)들이 nodejs 환경에서 실행된다.

  hteml 대신 js로 쓰고 
  js를 html안에 직접 작성 
  ???

  설치
  https://nodejs.org/ko/

  무지성 다음 설치 -> 설치 완료 후 -> vscode 재시작 -> 터미널 -> node -v

-----------------------------------------------------------------------

자바스크립트 자료형(데이터의 종류, 타입)

원시타입 
  string 문자열(문자)
  boolean 참거짓(T/F)
  undefined (데이터의 타입이 지정되어있지 않은 상태)
  null (값이 명확히 비어있는 상태)
  symbol (이터러블 오브젝트 키 값으로 사용 )

객체타임, 참조타입(집단)
  자바스크립트에서 원시타입을 제외한 모든 것은 객체타입
  하나의 데이터가 아닌 여러 데이터가 집단을 이루고 있는 경우가 많음

=> 아, 자바스크립트에는 이러한 데이터의 종류가 있고, 우리가 이런 데이터를 사용 해야하는거구나

--------------------------------------------------------------------------
변수
  위의 데이터 타입의 데이터를 직접 기입해서 사용할 수 있지만
  console.log(5)

  그러나 해당 데이터를 컴퓨터가 기억하게 하여 일회성 사용으로 그치지 않고 
  그 다음 실행에서도 이어서 실행할 수 있으며, 재사용이 가능하도록 하기 위해 변수를 사용한다

  a= 5;
  console.log(a) --> 5 
  a=5+1
  console.log(a) --> 6
  a=a+1
  console.log(a)--> 7 -->  값이 바뀌어도 기존에 있는 연산을 기억하기 때문에 재사용 

  상수: 항상 변하지 않는 값 --> 바뀌지 않지만 재사용하기 위해 사용 

  변수: 변하는 값 --> 바뀌는 값을 재사용하기 위해 사용 

  var, let,const를 이용하여 정의(선언)

  *자바스크립트에서는 변수를 선언할 때 자료형을 따로 지정하지 않는다.
  ex) 
    다른 언어  
      int a =5;
        a="안녕하세요" => errer
    js
      let a =5;
        a="안녕하세요" => o --> let:number a ="5" (타입스크립트)
           사실상 자료형 지정하지 않는게 좋은것은 아님 
           js에서 자료형 지정하는게 타입스크립트 

  선언 
    let/const 변수명 = 값; => 선언과 할당 동시에 
    let 변수명; (선언)
    변수명 = 값; (할당)

    -const는 상수이기 때문에 재할당이 불가능하여 선언과 할당을 동시에 해야함
    -let, var는 변수이기 때문에 선언 후 할당이 가능 

--------------------------------------------------------------------------

var -> 더이상 사용하지 않음 
    es4를 사용해야하는 전자정부프레임워크 기반의 회사가 아닌 이상 사용되지 않는다

    옛날에 사용하던 변수 표현법 
    (ES6 = ES2015)

    아직도 간혹 보이지만, es6 이후 문법에 익숙한 개발자

    *let/const와 var의 차이점 
      알아야하는 이유 ? 
        1. 면접
        2. 의도적으로 var을 사용해야 할 때가 있음 

        호이스팅 
          선언부가 상단으로 끌어올려져 
          선언 이전에도 사용이 가능한 상태 

          console.log(a)            => 원래는 X
          var a =5;

          js는 실행전 선언부를 먼저 수집하여 평가(저장) -> 실행 

        
          console.log(a)   => undefined -> 예외사항 
          var a =5;

          자바스크립트는 아직 값이 할당되지 않았지만 a의 값을 인지 
          반면, let, const는 수집 단계서부터 다른 곳에 저장되어 값이 할당되지 않으면 
          참조 에러가 나오도록 설정된 신규 변수 

          console.log(a) -> x -> 참조에러 
          let a= 5

          => 더이상 var는 사용하지 않는다 
          var는 수집 단계에 수집되어 값이 주어지기 전에도 사용이 가능하며 이러한 현상은 개발 과정에서 예외상황이 발생하기 쉽다 

          이를 방지하기 위해 let, conset가 등장하였으며 이는 var와다른 곳에 저장되어 값이 없다면 에러가 나오게 설정

          var는 중복선언도 가능, let, const는 중복선언 불가능 

---------------------------------------------------------

var 중복가능 
let 재할당 가능 
const 재할당 불가능 

---------------------------------------------------------------------------------
연산자 
  산술연산자 
    +,-,*,/,%

    let a=5;
    let b=2;
    
    console.log(a/b) //2.5
    console.log(a*b) //1

------------------------------------------------------------------------

    let a= 1;
    let b= true;   
    true=1, false=0
    a+b=2;

    a+null =1
    null=0 
    1+undefined = NAN (not a number)
------------------------

  단항 산술 연산자 
    ++
    --
    +
    -

  더하기 연산자 일때 하나의 항에 문자열이 있다면 문자열 결과
  ex) 1+"2" = "12"



  전위 연산자 
    ++a  -전위 연산자  
    a++  -후위 연산자 

    let a=5;
      console.log(++a) -> 6
      console.log(a++) -> 6  (콘솔 찍고+1 )
      console.log(a) -> 7

  문자열 연결 연산자 
    피연산자의 항 중 하나 이상의 문자열인 경우 문자열을 이어서 더해 동작 
    안 +녕 = 안녕 
    안녕하세요 -하세요 -> nAN ==> 더하기의 경우만 수립

    1+"2" = "12"
    "1" +"2"="12"
    true+"2" ="true2"



  할당 연산자 
    =
      ex) ;et a= 5
    +=
      ex) a+= 1; -> a= a+1
    -=
    *=


  우선 순위 

    10* (2+2)=40

  논리연산자 /비교 연산자 
    논리연산자 
      ture/ false -> 참 or 거짓 

    비교연산자 
      == 동등비교  (x와 y의 값이 같은지)           
        a=3
        b="3" 
        a==b => true`

      ===(eqeqeq 이퀄) 일치비교 (x와 y의 값과 자료형이 같은지)
        a=3
        b="3"
        a===b => false 


      != 부등비교 x와 y의 값이 다른지  x!=y 
        a!=b // a랑 b가 달라? 응 달라 (true) 아니 간아 (false) 
          3과 "3"은 값이 같음 ->false 

      !== 불일치비교
        x!==y x와 y의 값이 모두 다른지 
        ex) a!==b // a와 b는 값 혹은 타입이 달라 ? 아니 값은 같지만 타입이 달라 (true)

        3 !== 3이 아니라면 true 
        완벽히 일치하지 않으면 true


      a=3
      b=5

      a==b / false 



  ---------------------------------------------------------------------------------------------------------