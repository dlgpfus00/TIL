*함수 
  자바스크립트는 함수 지향 프로그래밍 언어
    함수 지향 프로그래밍이란? 
      프로그래밍 패러다임의 한 종류 
      
      프로그래밍 패러다임?
        개발 방법 중 하나이며, 개발자가 어떠한 관점을 갖고 프로그래밍에 임하는지에 대한 방법 중 하나

        명령형 프로그래밍 
          절차 지향: 순서를 중요시, 컴퓨터의 처리구조와 유사 
                    (ex: c, colbol ....)

          객체 지향: 객체들의 집합으로 프로그래밍 상호작용 표현 (유지보수가 쉬움) 
                      (java)

        선언형 프로그래밍 
          함수 지향 : 순수 함수를 조합하고 프로그래밍을 만드는 방식 
                    ex) 자바스크립트

    함수 지향 프로그래밍 관련 용어 
      불변성 : 함수 밖에서 함수 내부의 데이터 변형을 일으키지 않는다.
      클로저 : 부모함수가 실행 종료되어도 참주할 수 있는 내부 함수는 기억난다 


      순수함수: 입력된 값에만 의존하고, 외부 효과는 영향을 미치지 않는다.
      일급객체 함수: 함수 -> 함수는 입력값이 될 수도 있고, 반환 값이 될수도 있다
      유지관리 기능 : 외부 효과에 의존하지 않기 때문에 유지보수 용이
      모듈화: 한가지 기능 이상의 코드 집단(모듈)으로 분리해서 재사용
      부수효과" 함수 밖에서 산수 안의 반환값에 양향을 끼치는거 (사이트 이팩트.외부효과, 잠조투명성))=
      참조 투명성 ㅣ 동일함 값이네늗 옹일한 반환갑ㄴ

    +> 코드를 분류하(무듈화하여)필요할때마다 재사용 할 수 잇ㅅ게 지정 

 
*함수
        어떠한 기능(특정 연산) 을하는 코드의 집단
        ex)
        function 함수명 (파라미터1, 파라미터 2 ... (전달된값)) {
            ...연산
            return 반환값(있을수도 있고 없을수도 있음, 생략가능)
        }           

            =====> 이거 컴퓨터한테 선언만 한것, 컴터에 입력(기억)만 시킨것
            
        ***함수는 선언부와 실행부가 나뉘어져 있다.
        ***실행부에서는 선언부가 파라미터로 받을(전달된 값) 값을 전달

            함수명(전달값1, 전달값2)
            =addnumber(2,3)


        * 함수의 실행부는 반환 값이 없음 => undefinded
        const a =addnumber(2,3)
        console.log(a) // undefined 
        
        ex) function addNumber(num1,num2){
          console.log(num1+num2)
        }

        addnumber(2,3) //5
        console.log(addNumber(4,7)) //11, undefined  -> 리턴값이 없어 undefined가 나옴 

        *함수에서 연산한 결과값을 외부에서도 사용하고 싶을 때 

        ex) function addNumber(num1,um2){
          return num1+num2
        }

        addNumber(3,5)
        console.log(addNumber(3,5))   -> 리턴값을 주었기 때문에 undefinded안나옴 

        ==> 함수에 반환이 없으면 함수 실행부의 값은 undefinded이다 
        return의 유무는 함수 내의 연산을 바깥에서도 사용할지 작성자가 직접 정하는것 

        * return, 실행부, 선언부, 인자, 인수 

===============================================================================

(1) 기명함수
  -> 이름을 지어주고 컴퓨터에게 기억시킨 것
    function printHello(){
      console.log("hellow")
    }

(2) 익명함수
  -> 재사용 될 필요가 없는 함수며 콜백함수나 즉시실행함수(선언부와 실행부가 나눠지지 않음)
  function(){

  }

  함수명(function())

  => 익명함수는 재사용 가능성이 없고, 혼자서 실행할 수 없기 때문에 다른 함수에 의해 실행 되거나, 
  즉시 실행함수로서 사용한다. 

  


(3) 재귀함수
  -> 함수 안에서 같은 함수를 반복 
  (최단 경로 관련 알고리즘)

  function f(n) {
    if( n <=1){
      return 1
    }
    else를 굳이 쓰지 않아도 됨
    if문 안에 return을 쓰면 바로 끝남(얼리 리턴)
  }

  ***************
    function f(n){
      if(n<=1) return 1 
      return n + f(n-1)
    }

    f(10)
  ***************

(4) 즉시실행함수
  (function(num1,num2){

  })(2,3)

  => 선언과 동시에 실행 
    


(5) 화살표함수
  "=>"를 사용하여 보다 간략한 방법으로 함수를 선언할 수 있는 표현식 

  ex) function a (param1, param2){

  }

const a = () =>{}


 지역변수, 전역변수, 스코프, 스코프 체이닝   

스코프
  변수에 접근할 수 있는 범위 
  변수를 찾기 위한 규칙
             ---------- 특정한 블럭({})에서 사용할 수 있는 값이 저장  
  전역스코프, 지역스코프 
  ---------
  어디에서나 접근할 수 있는 값이 저장 

1. 지역변수 
  지역 스코프에 저장되며, 특정한 구역에서만 사용 가능 
  특정 구역을 벗어나면 메모리에서 사라진다. 

2. 전역변수 
  전역 스코프에 저장되며, 전체에서 사용 가능함 
  웹 페이지가 닫혀야만 사라지며, 변수명이 같은경우 지역변수 우선 

3. 스코프체이닝
  해당 스코프(범위)에 해당 변수가 없다면 상위 스코프에서 
  탐색하여 해당 변수가 있는지 확인 -> 전역 스코프 
   



   ==========================
   무조건 상위에 있어야만 접근 가능 
   같은 라인 선상에 있으면 에러 발생
    ex) f(a) 와 f(b) 가 같은 선상에 있으면 찾지 못함 
    둘 중에 하나가 상위에 있어야 전역스코프에서 찾을 수 있음 


