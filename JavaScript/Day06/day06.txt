reduce
  줄이다, 누적 
  현재 요소와 다음 요소의 연산된 누적 값을 반환

every
  모든 요소가 조건을 만족하는지 t/f 반환

some
  어느 한 요소라도 조건을 만족하는지 t/f 반환 --> 모두 만족하고 있지 않은지도 확인 가능 

sort 
  원본 배열의 요소 크기 대로 정렬 

배열의 내장함수와 고차함수 끝
=================================================================

배열의 생성 

Array.from()
  유사 배열 객체를 배열화
  *유사배열 객체
  -> 키 값이 인덱스이고 length 속성을 갖고있는 배열 
  ex)
    const 유사배열 ={
      0:"이혜련",
      1:"짱구",
      length:2
    } 

    유사배열[0]
    유사배열[1]
    유사배열.length
    


Array().fill()
  Array(10) -> 배열 생성
  ex) Array(10).fill(0) -> 생성 후 채운다
  Array(10).fill(0).map(()=>{})


모듈화
  모듈 -> 한가지 이상의 기능을 하고 있는 컴포너트(코드 집단)(아직 몰라도됨 컴포넌트)

  재사용성과 유지보수에 초점을 둠 (array3파일에 generatedMockPosts 이것도 재사용 가능  함수 )
                                  --------------하지만 파일로 따로 빼지 않았기 때문에 모듈화 되었다고 보긴 어려움
                                  --------------저번에 reset.css 는 파일을 따로 빼서 여기저기 사용했음 -> 모둘화되었음

  파일 단위로 분리하여, 파일에서 다른 파일로 함수나 객체 등을 가지고 오는 것 
  모듈화가 가능하기 때문에 컴포넌트라고 하는 모듈로 이루어진 컴포넌트 기반의 프레임 워크인

  react, vue, next, svelt, quiwck, astro 등이 현재 가장 유명한 프론트엔드 프레임워크로
  존재 가능

===================================================================
for
  -index조절 가능(증감), 요소와 인덱스를 모두 가지고 올 수 있음, 순서보장
  => 내가 필요한 요소만 반복, 인덱스 값이 필요할때

forEach 
  -모든 요소 순회, 요소와 인덱스를 모두 가지고 올 수 있음, 순서보장, 배열 
  => 모든 요소를 순회해야 하며, 인덱스 값이 필요할 때

for...in 
  -객체를 순회 (이터러블 하지 않은 객체를 순회, 객체의 key값을 가지고 올 수 있음)
  => 객체를 순회해야 할때

for...of 
  -모든 요소를 순회, 요소의 값만을 가지고 올 수 있음
  => 모든 요소를 순회만 하면 될 때(인덱스값 노필요)(왜냐면 인덱스 값이 필요하다는건 순서가 보장)


===================================================================
이터러블(순회사능한) 오브젝트
  객체의 값 중에 symbol.iterator(반복자) -> next, previous의 명령어 
  가 있는 객체를 이터러블 오브젝트 

  대표적으로 이터러블한 오브젝트는 배열 
  일반 객체는 이터러블하지 않기 때문에 순회가 불가능함  



