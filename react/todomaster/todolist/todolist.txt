번들 -> 페이지 리소스(코드)압축 ==> 모든 페이지의 정보가 다 있음 => 페이지를 이동할 때마다 번들을 다시 받을 필요가 있나? 

a태그나 location 객체로(객체 접근법) 데이터를 이동하면 페이지를 다시 접속 ==> 번들 다시 다운로드됨
따라서 link, useNavigate를 사용하여 이미 다운로드 받아진 번들 내의 코드를 재사용함 

이걸 알기 위해서 SPA. CSR 알아야함 !!!!!!!!!!
==============================================================================
(1) routes에 pages에서 생성된 컴포넌트를 연결했음 ==> 컴포넌트는 도메인을 의미하며 가장 큰 단위의 컴포넌트
(2) 리엑트에 상태가 변경되어야만 화면을 리랜더한다. 
(3) a, location대신 Link나 useNavigate를 사용한다 

==============================================================================
Q 뒤로가기 버튼 클릭 시 이전의 데이터를 호출하기 위해서 어떠한 방법을 사용할 수 있을끼?
    뒤로가기를 클릭하면 페이지가 이동되고 페이지가 이동되면 함수나 변수는 초기화 

    ==> URL을 이용하여 데이터 보존이 가능 

    1. 웹사이트 내 페이지 간에 데이터 보존을 위하여 
    2. 주소 히스토리를 이용하여 뒤로가기 지원 

==============================================================================

주소로 데이터를 관리하는 방법 
1. URL parameter  === url parmas->  '/'
    http://lyeon.com/goods/32123

2. Query string(parameter)===params -> '?', '&'
    http://lyeon.com/goods?prodID=32123 


==============================================================================
//p.s 설명 필기 


==============================================================================
react에서  css 적용 방법 

1. css-in-js 
    css파일이 나리어도 하나의 js안에서 css 작성이 가능 
    ex) styled-components, emotion

    현재로 우리나라에서는 실무에서 가장 많이 사용하는 css 작성 방법 

    [장점]
        css 파일이 생성되지 않음 
        하나의 js 파일에서 스타일을 관리하기 때문에 유지보수 용이
        class name에 관하여 고민할 필요가 없다 
    [단점]
        조금 느림.. 사용자는 느끼지 못함 
==============================================================================

2. pure css / scss + post css 
    일반적인 css, 그러나 모듈로 분리되어있는 리엑트의 특성상 class name을 주기 힘들다 
    그러나 post css를 사용하면 모듈 단위로 css를 분히 ==> class name이 겹쳐도 상관 없다는 뜻 
    ex) app.module.css
    [장점]
        퍼블리셔가 작성한 css 파일을 변환 없이 그대로 사용할 수 있음 
    [단점]
        파일 관리가 힘들다 


==============================================================================

3. tailwind css / panda css 
    가장 주목받고 최신 스택에 포함되는 css 
    이미 작성된 class명으로 css작성할 수 있으며 생산성 증가 

    ex) <div class ="text-green w300 h200">
    [장점]
        생산성이 증가 
    [단점]
        classname을 알고 있어야함, html이 지저분해짐, 더 세분화된 컴포넌트화 해야 할 필요가 있음 


==============================================================================
todolist toyproject
    componnets 
        main
            layout
                footer.js 
                header.js 
                layout.js 
            common 
                button.js 
                input.js 
            pages 
                main 
                    components
                        sign-in.js 
                        sign-up.js 
                    index.js 

==============================================================================
***************** 컴포넌트를 나누는 기준? *****************
    1. 가독성 없는 복잡한 UI 
        ex) 
            <div>
                <div>
                    <div> 이혜련</div>  -> 컴포넌트화 시켜서 <UserInfo/> 그래서 나중에 수정할 때 UserInfo만 수정하면 됨 찾기도 쉬움
                    <div> 20</div>
                    <div> ㅇㅇㅇ</div>
                </div>
                <div></div>
                <div></div>
                <div></div>
            </div>

    2. 재사용이 가능한 UI 
    <button></button>
    <input/> 

    3. 랜더링 최적화 
        리랜더 되었을 때 상태를 가진 컴포넌트만 리랜더 되어야하므로 
        컴포넌트를 분할해서 관리할 필요가 있다



    