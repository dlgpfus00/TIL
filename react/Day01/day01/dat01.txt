원하는 순간에 실행시킨다..?

리액트 - js 라이브러리 

react(re act)
    복잡한 사용자 인터페이스를 쉽게 구축하기 위해 
    메타(페이스북,인스타그램,쓰레드)에서 개발한 라이브러리

React의 구동 원리와 핵심 컨셉

    Virtual Dom (가상돔)
        react가 가지고 있는 가상의 Dom tree
        state를 구독하고 있고 해당 상태가 바뀌면 화면을 랜더

        => 개발자가 원하는 시점에 화면을 리랜더할 수 있다

    ReRender
        react는 일반 함수와 변수와 다른 state라는 값을 갖고 있고
        해당 상태가 바뀌면 해당 부분만 re redder한다 

    Component
        한가지 이상의 기능을 수행하는 UI를 모듈화
        각각의 component를 조립하여 페이지를 생성한다 

======================================================

CSR(Client Side Rendering) -> 사용자 측에서 화면을 그린다    ==> react
    사용자가 웹 사이트 접속(www.hyelyeon.com)했을 때 모든 
    페이지에 대한 데이터를 다운로드 

    사용자는 해당 데이터를 토대로 화면을 랜더링 

    장점
        첫 랜더링 이후의 화면 전환이 빠름

    단점 
        초기 첫 페이지 랜더링 속도가 느림
        SEO(검색 엔진 최적화)가 불리하다 
        사용자 하드웨어에 의존하여 화면을 랜더한다 

사용자가 페이지를 그린다 
================================================
SSR(Server Side Rendering) -> 서버에서 페이지를 완성하여 전달   ===> next.js
    사용자가 웹 페이지 접속 -> 서버에서 페이지를 랜더하여 전송하기 때문에 
    JS를 실행하지 않아도 화면을 보여줄 수 있음 

    하지만, JS가 적용되는데 까지는 시간이 걸림
    완성된 페이지를 전달 -> 사용자에게 화면을 보여줌 -> js가 적용 x -> js가 적용(하이드레이션)을 통해 javascript 적용 

    장점
        첫 화면(완성된) 랜더링 속도가 빠름 
        SEO 
    단점 
        사용자들이 페이지 방문시 비어있는 화면을 보는 시간이 길어질 수 있음 


프론트엔드서버가 페이지 완성해서 주는거..?


==========================================================
SPA(Sing Page Application) -> 페이지가 하나인 앱

MPA(Multi Page Application) -> 페이지가 여러개인 앱 



==============================================
==>  react는 CSR, SPA

===================================
react의 프로젝트 생성 

    1. CRA(create react app)
    https://create-react-app.dev/
    npx create-react-app my-app [폴더명]

    2. vite (나중에 써볼거임)


=============================================================

라이브러리 의존도가 높음 

패키지 관리 툴
    라이브러리를 관리하고 설치할 수 있는 도구 
    npm, npx, yarn, yarn berry(yarn2), pnpm

npm 
    nodeJS에서 내장되어있는 관리 툴 
    ex) npm i(install) 라이브러리명 (해당 프로젝트에만 설치)
        npm rm(remove) 라이브러리명

        npm i -g 라이브러리명 (노드 환경에서 설치 )
        npm i -D 라이브러리명 (개발 환경에서만 사용 할 라이브러리)

npx 
    설치하여 사용하는 것이 아닌, 일회성으로 실행만 하면 될 때 사용 관리 툴

yarn
    npm보다 속도가 빠른 약간 패키지 관리 툴 

    ex)
        npm i -g yarn -> 전역으로 설치(1회)
        yarn add 라이브러리명
        yarn remove 라이브러리명

yarn berry, pnpm

===================================================

12:22분쯤

react 프로젝트의 구조 
    node_moduels: 현재 프로젝트(폴더 - ex1)에 설치된 라이브러리의 실제 코드들이 저장
                용량이 큼 git에 올리지 않음 
                -> 팀이 사용하는 라이브러리 공유 불가능 
                -> packge.json에 설치되어있는 라이브러리 목록을 저장
                -> npm i, yarn 명령어를 통해 node_moduels를 설치 

    public: 정적 파일 관리, favicon, index.html, sitemap.xml, rovots.txt

    *src(sorce) :개발이 진행되는 곳

    gitignore: git에 커밋하고 싶지 않은 파일 관리 

    packge-lock.json : 프로젝트에 설치된 라이브러리들의 실제 주소 저장되는 곳

    packge.json : 실행 스크립트, 설치된 라이브러리의 목록과 버전을 관리, 옵션들도 관리 
================================================================================================

src의 구조 
    App.css  -> App.js에서 참조하는 기본 css 파일
    ***App.js -> index.js에 전달되어 실제 index.html에 전달되는 통합 컴포넌트 
                최상위 컴포넌트

                라이브러리의 설정, 옵션 
                주소에 따른 보여줄 컴포넌트 정의(라우터 정의)

    App.test.js  -> 테스트 코드 예시 파일(jestm, vitest,burn )

    index.css  -> app.css와 동일 index.js를 꾸며줌
    ***index.js -> 최상위 컴포넌트로서 app.js에서 전달된 컴포넌트를 index.html로 전달 

    repoerWebvitrals.js -> 프론트에 성능 체크, 사용x, 더 좋은 도구가 존재  
    setupTest.js  -> test-code에 필요한 라이브러리의 전역 설정 
                -> 테스트 코드는 *.test.*가 들어가면 test-code라고 인지 
                -> 모든 파일마다 라이브러리를 따로 설정할 수 없기에 전역으로 설정 

                --> 몰라도 됨 그냥 test코드 실행시 필요?


=================================================
babel, module bundler, react-publishing, folder structure(폴더 아키텍처)




===================================================================

react란 -> 다시, 행동한다, 복잡한 인터페이스 조각 -> 조합
react의 핵심컨셉 -> 가상돔, 컴포넌트, 리랜더 
CSR -> 사용자가 화면 그려줌 
SSR -> 서버가 화면 그려줌 
SPA -> html 1개 
MPA -> html 여러개 
React -> CSR,SPA 
패키지관리툴 -> npm, mpx,yarn 
react 프로젝트 -> npx create-reac-tapp [폴더명]
            -> vite 
프로젝트 구조 -> app.js -> index.js -> index.html 