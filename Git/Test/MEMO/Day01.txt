git(코드의 버전 관리 시스템)
  --히스토리 보관하는 시스템 -> 원격저장소 github -> 최대 규모의 개발자 커뮤니티, 코드 공유
  --소통을 위한 창구(리뷰(댓글), 이슈(에러)시스템) -> 협업 도구 -> organization -> 깃허브 플로우

    1. 히스토리 보관 (버전관리)
      => 왜 히스토리 보관?
        1. 까먹기 쉬워서 -> 이전코드 참고
        2. 버전관리 -> 버전 업데이트 이후 에러가 생기면, 롤백(되돌린다)
        3. 코드 삭제 -> 개발 과정에서 롤백

      원격저장소?
        1. 협업하는 팀원과의 히스토리 공유 -> 드라이브 

    2. 다른 개발자와의 코드 공유 (커뮤니티)

    3. 이슈 트래킹 (이슈, 에러 추적)

    4. 리뷰를 통한 개발 문화와 협업 문화 형성 -애자일


========================================================================================================
로컬 저장소와 원격 저장소 차이

  git- 로컬 저장소 (컴퓨터)

  github- 원격 저장소 (웹사이트에 저장)

  저장 할 파일 선택 -> 로컬환경에(컴퓨터) 저장 -> 원격저장소

git-hub flow(깃허브에 코드 올리는 방법)

  [준비단계]
    1. 내가 저장하고 싶은 코드들이 있는 폴더를 기준으로 로컬 저장소를 생성
      git init

    2. 해당 폴더 내에서 내가 저장하고 싶은 파일을 선택(스테이징 한다)=(로컬저장소에 저장될 준비를 한다)
      git add * 

    3. 스테이징 된 파일을 로컬 저장소에 저장 (commit)
      git commit -m '헤더' -m '본문' -m '각주'
      git commit -am '헤더' (기존에 커밋 내용을 덮음)

    4. 원격 저장소(깃허브 레포지토리)에 연결
      git remote add 원격저장소명 원격저장소주소
      ex) git remote add origin http://....git

      git remote=> 현재 연결된 원격 저장소 목록 확인 
      git remote remove 원격저장소명 => 원격저장소 연결 해제

    5. 히스토리 비교 (로컬 저장소의 버전과 원격저장소의 버전과 같을까? )
      로컬 저장소에는 이미 저장 but 원격 저장소에는 저장되어있지 않음 
      =버전이 다름 => 동기화(둘을 똑같이 만들 필요가 있음)

    6. 원격 저장소와 동기화 
      git pull 원격저장소명 브랜치명(main/master)
      ex) gir pull origin main (개발 도중 다른 개발자의 수정 내역을 동기화)
          git pull origin main --rebase(관계 없는 히스토리를 로컬환경과 동기화하기 위해서)
          git pull origin main --arrow-unrelated-histories

        (이후에 pull 받을 수 있게 처음 히스토리를 맞추어줌)

    7. 로컬 저장소의 저장내역 -> 원격 저장소에 밀어넣기
      git push 원격저장소명 브랜치명
      ex) git push origin main

      히스토리 동기화된 원격 저장소와 다른 부분만 push되어 동기화(로컬-원격, 내용물 일치)

      동기화된 원격 저장소와 다른 부분만 push되어 동기화 

    8. 분기 -branch
        git branch 브랜치명 [브랜ㄴ치 생성]
        git checkout 브랜치명 [브랜치 이동]

        git checkout -b 브랜치명 [생성한 후 이동]

흠흠 
========================================================================================================   
실습

  1. 각자 개인 레포지토리에 내가 올린 코드 push하기 

  2. 오거나이제이션(협업 레퍼지토리)를 생성해서 코드를 공동으로 보관
    아래와 같은 플로우를 진행 

    (1) 오거나이제이션 생성 (강사님*)
    (2) 팀원 초대 -> 메일 -> 허용 (강사님)
    (3) 권한(레포지토리에 수정권한)부여 (강사님)
    (4) 레포지토리 생성 *
    (5) init *
    (6) feat/test, feat/test-2
    (7) git hub commit convention
      => 가독성과 커밋 히스토리에 보관을 용이하게 하기 위하여 
          커밋 메세지를 일치 

    (8) pull request
        => 제가 코드 개발을 완료했어요, merge해도 괜찮을까요? 

    (9) reviewer -> code reciew -> 수정 요청 

    (10) 당사자가 직접 코드 수정 -> review -> reviewer approve 

    (11) 당사자가 코드를 merge.


powershell의 권한을 해제하는 명령어

1.윈도우에서 powershell 검색 후 관리자 권한으로 실행
Get-ExcutionPolicy
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned
Y+Enter

